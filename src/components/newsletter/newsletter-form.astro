---
interface Props {
    classes?: string;
    variant?: "default" | "inline";
}

const { variant = "default", classes } = Astro.props;
const description =
    variant === "inline"
        ? "No spam, just the article in yout inbox!"
        : "No spam, no advertisement, just the article that you can read right from your inbox!";
---

<div
    class:list={[
        classes,
        "not-prose flex flex-col",
        variant === "inline" && "items-center text-center sm:justify-center",
        variant === "default" && "sm:flex-row sm:items-center sm:gap-6",
    ]}
>
    <div>
        <h2 class="not-prose mb-2 text-2xl font-semibold text-font-color">
            Subscribe to the newsletter
        </h2>
        <p class="not-prose mb-8 text-pretty text-font-color sm:text-pretty">{description}</p>
    </div>
    <form
        class:list={[
            "flex shrink-0 flex-col gap-4",
            variant === "inline" && "sm:w-1/2",
            variant === "default" && "sm:w-1/2",
        ]}
        id="newsletter-form"
    >
        <input
            required
            type="email"
            name="email"
            autocomplete="email"
            class="block w-full min-w-72 rounded-md border-0 text-font-color ring-1 ring-inset ring-accent placeholder:text-zinc-400 focus:ring-2 focus:ring-inset focus:ring-accent sm:text-sm dark:bg-zinc-800 dark:ring-zinc-700"
            placeholder="Enter your email"
        />
        <button
            class:list={[
                "rounded bg-accent px-3.5 py-2.5 text-sm font-medium text-zinc-600 shadow transition-shadow duration-150 hover:shadow-md",
                variant === "inline" && "w-full self-center",
                variant === "default" && "w-fit self-end",
            ]}
            type="submit">Subscribe</button
        >
    </form>
</div>
<span class="animate-all mt-2 h-0 text-left opacity-0 duration-150 ease-in-out" id="submit-message">
</span>

<script>
    function newsletterFormHandling() {
        const form = document.getElementById("newsletter-form") as HTMLFormElement;
        const submitMessage = document.getElementById("submit-message");

        const handleEmailError = async (res: Response) => {
            const { message } = await res.json();
            if (!submitMessage) {
                return;
            }

            submitMessage.textContent = message ?? "An error occured with your email";
            submitMessage.classList.add("opacity-100", "text-error");
            submitMessage.classList.remove("text-success", "opacity-0");
        };

        const handleSuccess = () => {
            if (!submitMessage) {
                return;
            }

            submitMessage.textContent = "ðŸ¦† Please check your inbox to confirm your email";
            submitMessage.classList.add("opacity-100", "text-success");
            submitMessage.classList.remove("text-error", "opacity-0");
        };

        const handleForm = async (e: any) => {
            e.preventDefault();
            const formData = new FormData(form);

            const email = formData.get("email");
            if (email) {
                const res = await fetch("/api/newsletter", {
                    method: "POST",
                    body: JSON.stringify({
                        email,
                    }),
                });

                if (res.ok) {
                    form.reset();
                    handleSuccess();
                } else {
                    handleEmailError(res);
                }
            }
        };

        form?.addEventListener("submit", handleForm);

        document.addEventListener(
            "astro:before-swap",
            () => {
                form?.removeEventListener("submit", handleForm);
            },
            { once: true },
        );
    }

    newsletterFormHandling();
    document.addEventListener("astro:after-swap", newsletterFormHandling);
</script>
