---
interface Props {
    variant?: "default" | "inline";
}

const { variant = "default" } = Astro.props;
---

<div
    class:list={[
        variant === "default" && "py-8 sm:py-10",
        variant === "inline" && "flex flex-col items-center text-center sm:py-4",
    ]}
>
    <div class="mb-8 text-2xl font-semibold text-font-color">
        {
            variant === "default" && (
                <h2 class="inline sm:block">Get new articles right in your inbox</h2>
            )
        }
        {
            variant === "inline" && (
                <span class="inline sm:block">Get new articles right in your inbox</span>
            )
        }
    </div>
    <form
        class:list={["mb-4", variant === "inline" && "w-2/3", variant === "default" && "max-w-md"]}
        id="newsletter-form"
    >
        <div class="mb-2 flex flex-col gap-x-4 sm:flex-row">
            <label for="email" class="sr-only">Email address</label>
            <input
                name="email"
                type="email"
                autocomplete="email"
                required
                class="mb-3 flex-auto rounded-md border px-3.5 py-2 text-input sm:mb-0 sm:text-sm sm:leading-6 dark:border-0"
                placeholder="Enter your email"
            />
            <button
                type="submit"
                class="w-fit flex-none rounded-md bg-accent px-3.5 py-2.5 text-sm font-medium text-white"
                >Subscribe</button
            >
        </div>
        <span class="animate-all opacity-0 duration-150 ease-in-out" id="submit-message"></span>
    </form>
</div>

<script>
    function newsletterFormHandling() {
        const form = document.getElementById("newsletter-form") as HTMLFormElement;
        const submitMessage = document.getElementById("submit-message");

        const handleEmailError = async (res: Response) => {
            const { message } = await res.json();
            if (!submitMessage) {
                return;
            }

            submitMessage.textContent = message ?? "An error occured with your email";
            submitMessage.classList.add("opacity-100", "text-error");
            submitMessage.classList.remove("text-success", "opacity-0");
        };

        const handleSuccess = () => {
            if (!submitMessage) {
                return;
            }

            submitMessage.textContent = "ðŸ¦† You've been subscribed!";
            submitMessage.classList.add("opacity-100", "text-success");
            submitMessage.classList.remove("text-error", "opacity-0");
        };

        const handleForm = async (e: any) => {
            e.preventDefault();
            const formData = new FormData(form);

            const email = formData.get("email");
            if (email) {
                const res = await fetch("/api/newsletter", {
                    method: "POST",
                    body: JSON.stringify({
                        email,
                    }),
                });

                if (res.ok) {
                    form.reset();
                    handleSuccess();
                } else {
                    handleEmailError(res);
                }
            }
        };

        form?.addEventListener("submit", handleForm);

        document.addEventListener(
            "astro:before-swap",
            () => {
                form?.removeEventListener("submit", handleForm);
            },
            { once: true },
        );
    }

    newsletterFormHandling();
    document.addEventListener("astro:after-swap", newsletterFormHandling);
</script>
